// Generated by CoffeeScript 1.7.1

/*
Flexible Password Card Generator
https://github.com/ignlg/PasswordCard

Version: 0.5
Author: @ignlg
 */

(function() {
  var PasswordCard, crypto;

  crypto = require("crypto");

  PasswordCard = (function() {
    function PasswordCard(seed, columns, rows, pattern) {
      this.seed = seed;
      this.columns = columns != null ? columns : 13;
      this.rows = rows != null ? rows : 13;
      this.pattern = pattern != null ? pattern : "aA1!";
    }

    PasswordCard.prototype.dictionaries = {
      "a": "abcdefghijklmnopqrstuvwxyz",
      "A": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      "1": "0123456789",
      "!": "!?@#$%&()[]+-*/=<>_.,;\"'"
    };

    PasswordCard.prototype._seedInc = 0;

    PasswordCard.prototype.setSeed = function(seed) {
      this.seed = seed;
    };

    PasswordCard.prototype._getPass = function() {
      var inc, pass, seed;
      seed = this.seed;
      inc = ++this._seedInc;
      pass = seed.substr(Math.floor(seed.length / 2)) + seed[inc % seed.length] + seed[(inc * 2) % seed.length] + seed[((inc + Math.floor(seed.length / 2)) * 3) % seed.length] + seed.substr(0, Math.floor(seed.length / 2)) + inc;
      return pass;
    };

    PasswordCard.prototype._getKey = function(pass) {
      var sha;
      sha = crypto.createHash("sha256");
      sha.update(pass, "utf-8");
      return sha.digest("base64");
    };

    PasswordCard.prototype._getChars = function(key, dict, numchars) {
      var d, j, keyn, n, _i;
      d = dict.split("");
      keyn = "";
      for (j = _i = 0; 0 <= numchars ? _i < numchars : _i > numchars; j = 0 <= numchars ? ++_i : --_i) {
        n = parseInt(key.charCodeAt(j));
        if (d.length === 0) {
          d = dict.split("");
        }
        keyn += d.splice(n % d.length, 1);
      }
      return keyn;
    };

    PasswordCard.prototype._getPatternChars = function() {
      var patt, phrases, _i, _len, _ref;
      phrases = [];
      _ref = this.pattern;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        patt = _ref[_i];
        phrases.push(this._getChars(this._getKey(this._getPass()), this.dictionaries[patt], this.columns));
      }
      return phrases;
    };

    PasswordCard.prototype.getCard = function(seed) {
      var card, char, chars, column, n, pattern, phrase, word, _i, _j, _k, _ref, _ref1, _ref2, _seed;
      if (seed) {
        _seed = this.seed;
        this.seed = seed;
      }
      if (!this.seed) {
        return false;
      }
      if ("string" === typeof pattern) {
        pattern = pattern.split("");
      }
      card = [];
      for (n = _i = 0, _ref = this.rows; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
        chars = this._getPatternChars();
        phrase = [];
        for (column = _j = 0, _ref1 = this.columns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
          word = "";
          for (char = _k = 0, _ref2 = this.pattern.length; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; char = 0 <= _ref2 ? ++_k : --_k) {
            word += chars[char][column];
          }
          phrase.push(word);
        }
        card.push(phrase);
      }
      if (seed) {
        this.seed = _seed;
      }
      return card;
    };

    return PasswordCard;

  })();

  module.exports = PasswordCard;

}).call(this);
